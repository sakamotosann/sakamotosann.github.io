<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>newcoder OI test contest 2</title>
      <link href="/post/d53e8d9b.html"/>
      <url>/post/d53e8d9b.html</url>
      <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/acm/contest/185#question" target="_blank" rel="noopener">牛客OI赛制测试赛2</a></p><h1 id="A-无序组数-GCD"><a href="#A-无序组数-GCD" class="headerlink" title="A-无序组数(GCD)"></a>A-无序组数(GCD)</h1><blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个二元组（A,B）<br>求出无序二元组（a,b） 使得（a|A，b|B）的组数<br>无序意思就是(a,b)和(b,a) 算一组.</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行数据组数 T（1≤T≤10000）<br>接下来T行，每行两个正整数 A,B（1≤A,B≤10000）</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>共T行，每行一个结果</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>1<br>4 6</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>11</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>样例解释：<br>二元组如下：<br>(1,1)(1,2)(1,3)(1,6)<br>(2,1)(2,2)(2,3)(2,6)<br>(4,1)(4,2)(4,3)(4,6)<br>共12组.</p><p>无序二元组如下：<br>(1,1)(1,2)(1,3)(1,6)<br>(2,2)(2,3)(2,6)<br>(4,1)(4,2)(4,3)(4,6)<br>共11组</p></blockquote><p>暴力模拟+去重过了就没写其他方法了，但是这题更优雅的方法是分别求解A、B的因子数量和A、B的GCD，然后计算GCD的因子数量，等同于计算了A、B相同的因子个数。计算两数因子个数的积然后减去相同因子所组成的相同的元祖，结果就是答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T, a, b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq1, seq2;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> f = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n); ++i)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line">&#123;</span><br><span class="line">seq1.emplace_back(i);</span><br><span class="line">seq1.emplace_back(n / i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">seq2.emplace_back(i);</span><br><span class="line">seq2.emplace_back(n / i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(seq1);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(seq2);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;().swap(ans);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">factor(a);</span><br><span class="line">factor(b, <span class="number">0</span>);</span><br><span class="line">sort(seq1.begin(), seq1.end());</span><br><span class="line">seq1.erase(unique(seq1.begin(), seq1.end()), seq1.end());</span><br><span class="line">sort(seq2.begin(), seq2.end());</span><br><span class="line">seq2.erase(unique(seq2.begin(), seq2.end()), seq2.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">signed</span>)seq1.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">signed</span>)seq2.size(); ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (seq1[i] &lt; seq2[j])</span><br><span class="line">ans.emplace_back(seq1[i], seq2[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans.emplace_back(seq2[j], seq1[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(ans.begin(), ans.end());</span><br><span class="line">ans.erase(unique(ans.begin(), ans.end()), ans.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="B-路径数量-矩阵快速幂"><a href="#B-路径数量-矩阵快速幂" class="headerlink" title="B-路径数量(矩阵快速幂)"></a>B-路径数量(矩阵快速幂)</h1><blockquote><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个 n * n 的邻接矩阵A.<br>A是一个01矩阵 .<br>A[i][j] = 1表示i号点和j号点之间有长度为1的边直接相连.<br>求出从 1 号点 到 n 号点长度为k的路径的数目.</p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第1行两个数n,k (20 ≤n ≤ 30,1 ≤ k ≤ 10)<br>第2行至第n+1行，为一个邻接矩阵</p><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>题目中所求的数目</p><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>4 2<br>0 1 1 0<br>1 0 0 1<br>1 0 0 1<br>0 1 1 0</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>2</p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><img src="/post/d53e8d9b/1.png"><p>样例如图:<br>第一条路径：1-2-4<br>第二条路径：1-3-4</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="C-数列下标-暴力"><a href="#C-数列下标-暴力" class="headerlink" title="C-数列下标(暴力)"></a>C-数列下标(暴力)</h1><blockquote><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个数列 A，求出一个数列B.<br>其中Bi表示 数列A中Ai右边第一个比Ai大的数的下标(从1开始计数),没有找到这一个下标Bi就为0,输出数列B</p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行1个数字 n (n ≤ 10000)<br>第二行n个数字第 i 个数字为 Ai (0 ≤ Ai ≤ 1000000000)</p><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>一共一行，第 i 个数和第 i+1 个数中间用空格隔开.</p><h2 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>6<br>3 2 6 1 1 2</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>3 3 0 6 6 0</p><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>样例不用解释</p></blockquote><p>暴力即可，但是比赛这题数据有点问题，1e4是过不了的，换成1e5就过了，QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[MAXN], ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">idx = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans[i] = idx;</span><br><span class="line">&#125;</span><br><span class="line">ans[n] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="D-星光晚餐-找规律"><a href="#D-星光晚餐-找规律" class="headerlink" title="D-星光晚餐(找规律)"></a>D-星光晚餐(找规律)</h1><blockquote><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>Johnson先将天上n个星星排成一排，起初它们都是暗的。</p><p>他告诉他的妹子，他将挥动n次魔法棒，第i次挥动会将编号为i的正整数倍的星星的亮暗反转，即亮的星星转暗，暗的星星转亮。</p><p>Johnson想问Nancy，最终会有多少个星星依旧闪亮在天空。</p><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>一个整数n，含义请见题目描述。</p><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>一个整数ans，即n次操作后会有多少个星星依旧闪亮。</p><h2 id="示例1-3"><a href="#示例1-3" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>3</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>1</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>7</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>2</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>对于60%的数据：n ≤ \(2×10^6\)<br>对于100%的数据：n ≤ \(10^{18}\)</p></blockquote><p>打表找了一下规律发现正好符合sqrt(n)向下取整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (ll)<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="E-括号序列-模拟"><a href="#E-括号序列-模拟" class="headerlink" title="E-    括号序列(模拟)"></a>E-    括号序列(模拟)</h1><blockquote><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定括号长度N，给出一串括号（只包含小括号），计算出最少的交换（两两交换）次数，使整个括号序列匹配。<br>我们认为一个括号匹配，即对任意一个’)’，在其左侧都有一个’(‘与它匹配，且他们形成一一映射关系。</p><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行：整数N，表示括号序列长度<br>第二行：一个字符串，表示括号</p><h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>一个整数，表示最少的交换次数</p><h2 id="示例1-4"><a href="#示例1-4" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>6<br>(()))(</p><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>1</p><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>6<br>)))(((</p><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>2</p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>对于80%的数据：n ≤ 3000<br>对于100%的数据，n ≤ \(5×10^{6}\)</p></blockquote><p>括号字符串中已经匹配的括号不需要交换，那么只需要统计一下未匹配的括号的数量，交换一次可以消去4个括号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">signed</span>)s.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'('</span>)</span><br><span class="line">l++;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">')'</span>&amp;&amp;l &gt; r)</span><br><span class="line">r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">ceil</span>((<span class="keyword">double</span>)(n - r * <span class="number">2</span>) / <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="F-括号序列-打表"><a href="#F-括号序列-打表" class="headerlink" title="F-    括号序列(打表)"></a>F-    括号序列(打表)</h1><blockquote><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数X，求一个整数N，使得\(N!\)恰好大于\(X^X\)。</p><h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行：一个整数X</p><h2 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>第一行：一个整数N</p><h2 id="示例1-5"><a href="#示例1-5" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h3><p>7</p><h3 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h3><p>10</p><h3 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h3><p>每个测试点所对应的X满足：<br>第i个测试点输入的值为第i-1个测试点输入的值乘以10再加上7。<br>特别的，第一个测试点所输入的值为7。<br>提示：数据共有10组。</p></blockquote><p>数据较大时肯定不能通过直接比较的方法来计算了，计算位数是一个不错的方法，分别计算\(N!\)的每一个数字，\(N!=\prod_{i=1}^{N}lgi\)，\(X\)的位数为\(lgX\)，\(X^X\)的位数为\(lgX^X\)，化简之后为\(XlgX\)。由于备注已经说明测试数据了，打个表结果就出来了，就是算到最后两个时间可能会稍微长一点…</p><p>我的代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">string</span> X;</span><br><span class="line">ll a[<span class="number">10</span>] = &#123; <span class="number">10</span>,<span class="number">94</span>,<span class="number">892</span>,<span class="number">8640</span>,<span class="number">84657</span>,<span class="number">834966</span>,<span class="number">8267019</span>,<span class="number">82052137</span>,<span class="number">815725636</span>,<span class="number">8118965902</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; X;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[X.size() - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用Stirling公式 \(n!\approx\sqrt{2\pi n}(\frac{n}{e})^n\):<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> lb;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">lb N, X;</span><br><span class="line">ll l = <span class="number">1</span>, r = (ll)<span class="number">1e18</span>, ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(lb N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">N = <span class="built_in">log</span>(<span class="number">2</span> * <span class="built_in">acos</span>(<span class="number">-1</span>) * N) / <span class="number">2</span> + N * <span class="built_in">log</span>(N / <span class="built_in">exp</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (N &gt; X)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; X;</span><br><span class="line">X *= <span class="built_in">log</span>(X);</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check((lb)mid))</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> newcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> CONTEST </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HDU 1028 Ignatius and the Princess III(DP入门)</title>
      <link href="/post/511e6933.html"/>
      <url>/post/511e6933.html</url>
      <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1028" target="_blank" rel="noopener">HDU1028</a></p><blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>“Well, it seems the first problem is too easy. I will let you know how foolish you are later.” feng5166 says.<br>“The second problem is, given an positive integer N, we define an equation like this:<br>  N=a[1]+a[2]+a[3]+…+a[m];<br>  a[i]&gt;0,1&lt;=m&lt;=N;<br>My question is how many different equations you can find for a given N.<br>For example, assume N is 4, we can find:<br>  4 = 4;<br>  4 = 3 + 1;<br>  4 = 2 + 2;<br>  4 = 2 + 1 + 1;<br>  4 = 1 + 1 + 1 + 1;<br>so the result is 5 when N is 4. Note that “4 = 3 + 1” and “4 = 1 + 3” is the same in this problem. Now, you do it!”</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input contains several test cases. Each test case contains a positive integer N(1&lt;=N&lt;=120) which is mentioned above. The input is terminated by the end of file.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, you have to output a line contains an integer P which indicate the different equations you have found.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>10<br>20</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>5<br>42<br>627</p></blockquote><p>大致题意，一个数n可以拆分为[1, m]个大于0的整数相加，输入整数n，输出有多少种相加的方法，其实就是整数划分。</p><p>参考了这篇博客 <a href="https://blog.csdn.net/l2533636371/article/details/78077640" target="_blank" rel="noopener">https://blog.csdn.net/l2533636371/article/details/78077640</a><br>想了很久，规律也找出来了，但是没能总结出状态转移方程，代码很精巧，值得学习。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> N, dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">120</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i + j &lt;= <span class="number">120</span>; ++j)</span><br><span class="line">dp[i + j] += dp[j];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[N] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
